/*
-> Grammar rules
-> Parsing table (FIRST, FOLLOW, nonterminals, terminals = tokans!!!!)
-> Stack -> tree (getting tokens from lexical)
*/


/*
Grammar for:
    loops 
    ifconditions 
    assignment statments 
    switch case 
    arthimatic boolean expression
    function call
    returnstatments 
    function delclarions 
    functions call
    array
*/

//-------------------------------------------
#include <iostream>
#include <string>
#include <vector>
using namespace std;

typedef nonTerminal;
vector<nonTerminal> symbols;

//typedef char NonTerminal;
//typedef vector<NonTerminal> NonTerminalVec;

/*
E    -> T E"
E"  -> + T E"| #
T    -> F T2
T2   -> * F T2 | #
F    -> ( E ) | id

nonTerminal[] F = [[id], [(, E, )]]
*/

//-------------------------------------------
//map
string firstTable [SYMBOLS][2];
string followTable [SYMBOLS][2];





const int SYMBOLS = 10;

// Statements
stmt-sequence -> statement";" stmt-seq
stmt-seq -> stmt-sequence | "#"

//return stm
//array
//enum + union

statement  -> if-stm
            | while_loop
            | do_while_loop
            | for-loop
            | switch_stm
            | assignment 
            | exp
            | function_call  /////////
            | function_stm    // function_declration 
    
            

stmt_or_empty -> stmt-sequence | "#"

// if [if-stm, else-part]
if-stm -> if "("exp")" statement else-part
else-part -> else statement | "#"



//loops
for_loop -> "for" "(" init_expr ";" condition_expr ";" update_expr ")" compound_statement
init_expr -> assignment_expr_list | "#"
assignment_expr_list -> assignment_expr cont_
cont_ -> assignment_expr_list ","| "#"
assignment_expr -> variable "=" exp
variable -> Cont identifier 
Cont-> int | "#"
condition_expr -> exp | "#"
update_expr -> assignment_expr_list | "#"
compound_statement -> "{" statement "}"|statement";"        ///////////////////////to be handelled


while_loop -> "while" "(" exp ")" loop_statement

do_while_loop -> "do" loop_statement "while" "("exp ")" ";"

loop_statement ->  "{" stmt-sequence "}" | statement";" | "#"



//assignment
assignment-type -> type | "#"
assignment -> assignment-type identifier assignment-operator exp
assignment-operator -> "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>="

        
    
//switch
switch_stm -> "switch" "(" exp ")" switch_body
switch_body -> "{" first_case "}" ";" | one_case_d | "break"";"| ";" | stmt-sequence

first_case -> case_stm_d | stmt-sequence case_stm_d

case_body -> "{" stmt_or_empty break_stm "}" | stmt_or_empty


case_stm_d  -> "case" constant_exp ":"case_body break_stm case_stm_d 
            |  "default" ":"case_body break_stm case_stm
            |  "#"

case_stm  -> "case" constant_exp ":" case_body break_stm case_stm
            | "#"

one_case_d -> "case" constant_exp ":"stmt_part_d 
            |  "default" ":" stmt_part
                
one_case -> "case" constant_exp ":" stmt_part | "#"


stmt_part_d -> one_case_d | stmt-sequence | "break" ";" | "{" stmt_or_empty break_stm "}"
stmt_part -> one_case | stmt-sequence | "break" ";" | "{" stmt_or_empty break_stm "}"

constant_exp -> number | letter                 
break_stm -> "break" ";" | "#"



//////OTHERS//////
    // numbers [number]
 

    //type
    type               -> integral_types | numeric_types | pointer_type | user_defined_type //long, short
    pointer_type       -> type "*"
    user_defined_type  -> struct_type | typedef_type //enum_type
    struct_type        -> "struct" identifier
    typedef_type       -> identifier

    // ///////Expressions [exp, exp2, addop, term, term2, mulop, factor]
    // exp -> term exp2
    // exp2 -> addop term exp2 | "#"
    // addop   -> + | -
    // term -> factor term2
    // term2 -> mulop factor term2 | "#"
    // mulop   -> * | /
    // factor  -> (exp) | number


    //////expressionsPRO 

    exp               -> term exp2
    exp2              -> addop term exp2 | "#"
    term              -> factor term2
    term2             -> mulop factor term2 | "#"
    factor            -> "("exp ")"| number | identifier | function_call | array_access | struct_access | pointer_op | type_cast | boolean_exp | string_op | bitwise_op | unary_op
    addop             -> "+" | "-"
    mulop             -> "*" | "/"
    array_access      -> identifier "[" exp "]"
    struct_access     -> identifier "." identifier
    pointer_op        -> "*" exp
    type_cast         -> "(" type ")" exp
    boolean_exp       ->  "&&" exp | "||" exp |  relational_exp exp
    boolean_exp_      -> exp boolean_exp  
    relational_exp    -> "==" | "!=" | ">" | "<" | ">=" | "<="
    string_op         -> exp "+" exp
    bitwise_op        -> "&" exp |  "|" exp | "^" exp |  "<<" exp | ">>" exp
    bitwise_op__      -> exp bitwise_op 
    unary_op          -> "+"exp | "-"exp | "!"exp | sign_exp exp | exp sign_exp | "~"exp
    sign_exp          ->  "++"| "--"
    number            -> digit digit_ 
    digit_            -> number | "#"
    digit             -> "0"| "1"| "2"| "3"| "4"| "5"| "6"| "7"| "8"| "9"
    identifier        -> start_char following_chars
    start_char        -> letter | "_"
    following_chars   -> letter following_chars | digit following_chars| "_" following_chars 
    letter            -> "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" 
                       | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

  








//Functions
function_stm -> type identifier "(" parameter_list ")" func2 | "void" identifier "(" parameter_list ")" func3
func2 -> ";" | "{"stmt-and-return"}"
stmt-and-return ->  stmt-sequence stmt-and-return | return_stm stmt-and-return
stmt-and-void-return ->  stmt-sequence stmt-and-return | void-return_stm stmt-and-return
func3 -> ";" | {stmt-and-void-return}

parameter_list       -> parameter | parameter ","parameter_list | "#"
parameter            -> type identifier

function_call  -> identifier "(" argument_list ")" ";"
argument_list           -> exp | exp "," argument_list | "#"


return-stm     -> "return" exp ";"
void-return-stm -> "return"    ";"







//assignment_statement -> identifier "="exp ";"

